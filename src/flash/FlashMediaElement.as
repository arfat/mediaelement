package{	import flash.display.*;	import flash.events.*;	import flash.media.*;	import flash.net.*;	import flash.text.*;	import flash.system.*;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.navigateToURL;    import flash.net.URLRequest;	import flash.geom.ColorTransform;	import flash.filters.DropShadowFilter;	import flash.utils.Timer;	import flash.external.ExternalInterface;	import flash.geom.Rectangle;	import htmlelements.IMediaElement;	import htmlelements.VideoElement;	import htmlelements.AudioElement;	import htmlelements.YouTubeElement;	import com.glam.iab.vast.parsers.VASTParser;	import com.glam.iab.vast.vos.VAST;	public class FlashMediaElement extends Sprite {				private var _vastXML:String="";		private var _selectedCreative;		private var _clickFlgForBgMcForVideoClickEvents:String;		private var _videoType = ""; // Content means actual video/Youtube ,other than is preroll				private var _flashid:String;		private var _logoUrl:String;		private var _shareLnk:String;		private var _mediaUrl:String;		private var _autoplay:Boolean;		private var _preload:String;		private var _debug:Boolean;		private var _isVideo:Boolean;		private var _video:DisplayObject;		private var _timerRate:Number;		private var _stageWidth:Number;		private var _stageHeight:Number;		private var _enableSmoothing:Boolean;		private var _allowedPluginDomain:String;		private var _isFullScreen:Boolean = false;		private var _startVolume:Number;		private var _controlStyle:String;		private var _autoHide:Boolean = true;		private var _streamer:String = "";		private var _enablePseudoStreaming:Boolean;		private var _pseudoStreamingStartQueryParam:String;		private var _hasStartedPlay:Boolean = false;		private var _posterSrc:String;		private var _posterObj:Loader;		private var _jsInterface:String;		// native video size (from meta data)		private var _nativeVideoWidth:Number = 0;		private var _nativeVideoHeight:Number = 0;		// visual elements		private var _mediaElementDisplay:FlashMediaElementDisplay = new FlashMediaElementDisplay();		private var _output:TextField;		private var _fullscreenButton:SimpleButton;		// media		private var _mediaElement:IMediaElement;		private var _isEnded:Boolean = false;		// connection to fullscreen		private var _connection:LocalConnection;		private var _connectionName:String;				// CONTROLS		private var _showControls:Boolean;		private var _controlBar:MovieClip;		private var _controlBarBg:MovieClip;		private var _scrubBar:MovieClip;		private var _scrubTrack:MovieClip;		private var _scrubOverlay:MovieClip;		private var _scrubLoaded:MovieClip;		private var _scrubMc:MovieClip;		private var _hoverTime:MovieClip;		private var _sharingMc:MovieClip;		private var _logoMc:MovieClip;		//private var _hoverTimeText:TextField;		private var _playButton:SimpleButton;		private var _pauseButton:SimpleButton;		private var _duration:TextField;		private var _currentTime:TextField;		//private var _fullscreenIcon:SimpleButton;		private var _fullscreenIcon:MovieClip;		private var _volumeMuted:SimpleButton;		private var _volumeUnMuted:SimpleButton;		private var _scrubTrackColor:String;		private var _scrubBarColor:String;		private var _scrubLoadedColor:String;		private var dragging:Boolean = false;		private var _playBtnMc:MovieClip;		private var _skipAdMc:MovieClip;		private var _skipTimer:Timer;		private var _skipAdTimerCount:Number;				// IDLE Timer for mouse for showing/hiding controls		private var _inactiveTime:int;        private var _timer:Timer;        private var _idleTime:int;        private var _isMouseActive:Boolean		private var _isOverStage:Boolean = false;		// security checkes		private var securityIssue:Boolean = false; // When SWF parameters contain illegal characters		private var directAccess:Boolean = false; // When SWF visited directly with no parameters (or when security issue detected)		public function FlashMediaElement() {			// check for security issues (borrowed from jPLayer)			checkFlashVars(loaderInfo.parameters);			// allows this player to be called from a different domain than the HTML page hosting the player 			Security.allowDomain("*");			Security.allowInsecureDomain('*');			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.addEventListener(FullScreenEvent.FULL_SCREEN,onFullscreen);			if((stage.stageWidth != 0)&&(stage.stageHeight != 0)){				init();			} else {				//work around IE flash embedding issues				//trace('stage is 0x0; listening for resize event');				stage.addEventListener(Event.RESIZE, function onResize(e:Event):void {					if((stage.stageWidth != 0) && (stage.stageHeight != 0)){						trace('stage is OK!');						stage.removeEventListener(Event.RESIZE, onResize);						init();					} else {						trace('stage is ' + stage.stageWidth + 'x' + stage.stageHeight);					}				});			}		}		private function init():void {			// add debug output			_output = new TextField();			_output.textColor = 0xeeeeee;			_output.width = stage.stageWidth - 100;			_output.height = stage.stageHeight;			_output.multiline = true;			_output.wordWrap = true;			_output.border = false;			_output.filters = [new DropShadowFilter(1, 0x000000, 45, 1, 2, 2, 1)];			_output.text = "Initializing...\n";			addChild(_output);			_output.visible = securityIssue;			if (securityIssue) {				_output.text = "WARNING: Security issue detected. Player stopped.";				return;			}			// get parameters			// Use only FlashVars, ignore QueryString			var params:Object, pos:int, query:Object;			params = LoaderInfo(this.root.loaderInfo).parameters;			pos = root.loaderInfo.url.indexOf('?');			if (pos !== -1) {				query = parseStr(root.loaderInfo.url.substr(pos + 1));				for (var key:String in params) {					if (query.hasOwnProperty(trim(key))) {						delete params[key];					}				}			}			//_vastXML = "vast_sample.xml";			//_vastXML = "vast_glam.xml";			//_vastXML = "file:///Volumes/GlamData/GLAM/GlamProjects/Other%20works/mediaelement/build/vast_glam.xml";			//_vastXML = "http://www35.glam.com/gad/glamadapt_psrv.act?sz=555x2;ga_output=plain;reqsq=0;vschema=vast1;csz=300x250;afid=19565145;native=yes;_g_cv=4";						//_logoUrl = (params['logo'] != undefined) ? String(params['logo']) : "glamlogo.png";			_vastXML = (params['vxml'] != undefined) ? String(params['vxml']) : "http://www35.glam.com/gad/glamadapt_psrv.act?sz=555x2;ga_output=plain;reqsq=0;vschema=vast1;csz=300x250;afid=19565145;native=yes;_g_cv=4";			_shareLnk = (params['share_url'] != undefined) ? String(params['share_url']) : "http://www.glam.com";			_skipAdTimerCount = (params['skipcnt'] != undefined) ? String(params['skipcnt']) : 5;			_flashid = (params['id'] != undefined) ? String(params['id']) : "me_flash_0";			_mediaUrl = (params['file'] != undefined) ? String(params['file']) : "";			_autoplay = (params['autoplay'] != undefined) ? (String(params['autoplay']) == "true") : false;			_debug = (params['debug'] != undefined) ? (String(params['debug']) == "true") : false;			_isVideo = (params['isvideo'] != undefined) ? ((String(params['isvideo']) == "false") ? false : true  ) : true;			_timerRate = (params['timerrate'] != undefined) ? (parseInt(params['timerrate'], 10)) : 250;			_showControls = (params['controls'] != undefined) ? (String(params['controls']) == "true") : false;			_enableSmoothing = (params['smoothing'] != undefined) ? (String(params['smoothing']) == "true") : false;			_startVolume = (params['startvolume'] != undefined) ? (parseFloat(params['startvolume'])) : 0.8;			_preload = (params['preload'] != undefined) ? params['preload'] : "none";			_controlStyle = (params['controlstyle'] != undefined) ? (String(params['controlstyle'])) : ""; // blank or "floating"			_autoHide = (params['autohide'] != undefined) ? (String(params['autohide'])) : false; // defaulting to false			_scrubTrackColor = (params['scrubtrackcolor'] != undefined) ? (String(params['scrubtrackcolor'])) : "0x333333";			_scrubBarColor = (params['scrubbarcolor'] != undefined) ? (String(params['scrubbarcolor'])) : "0xB7B7B7";			_scrubLoadedColor = (params['scrubloadedcolor'] != undefined) ? (String(params['scrubloadedcolor'])) : "0x424242";//"0x3CACC8";			_enablePseudoStreaming = (params['pseudostreaming'] != undefined) ? (String(params['pseudostreaming']) == "true") : false;			_pseudoStreamingStartQueryParam = (params['pseudostreamstart'] != undefined) ? (String(params['pseudostreamstart'])) : "start";			_streamer = (params['flashstreamer'] != undefined) ? (String(params['flashstreamer'])) : "";			_jsInterface = (params['jsinterface'] != undefined) ? (String(params['jsinterface'])) : "mejs.MediaPluginBridge";			_posterSrc = (params['poster'] != undefined) ? (String(params['poster'])) : "";			_output.visible = _debug;									// controls!			_controlBar = _mediaElementDisplay.getChildByName("controls_mc") as MovieClip;						_controlBarBg = _controlBar.getChildByName("controls_bg_mc") as MovieClip;			_scrubTrack = _controlBar.getChildByName("scrubTrack") as MovieClip;			_scrubBar = _controlBar.getChildByName("scrubBar") as MovieClip;			_scrubOverlay = _controlBar.getChildByName("scrubOverlay") as MovieClip;			_scrubLoaded = _controlBar.getChildByName("scrubLoaded") as MovieClip;			_scrubMc = _controlBar.getChildByName("scrubMc") as MovieClip;			_sharingMc = _controlBar.getChildByName("sharing_mc") as MovieClip;			_logoMc = _controlBar.getChildByName("logoMc") as MovieClip;						_scrubOverlay.buttonMode = true;			_scrubOverlay.useHandCursor = true			applyColor(_scrubTrack, _scrubTrackColor);			applyColor(_scrubBar, _scrubBarColor);			applyColor(_scrubLoaded, _scrubLoadedColor);						if (isNaN(_timerRate))				_timerRate = 250;			// setup stage and player sizes/scales			_stageWidth = stage.stageWidth;			_stageHeight = stage.stageHeight -_controlBar.height+1;			this.addChild(_mediaElementDisplay);			stage.addChild(this);			// position and hide			_fullscreenButton = _mediaElementDisplay.getChildByName("fullscreen_btn") as SimpleButton;			_fullscreenButton.visible = false;			//_fullscreenButton.alpha = 0;			_fullscreenButton.addEventListener(MouseEvent.CLICK, fullscreenClick, false);			_fullscreenButton.x = stage.stageWidth - _fullscreenButton.width;			_fullscreenButton.y = stage.stageHeight - _fullscreenButton.height;															// create media element			if (_isVideo) {								_mediaElement = new VideoElement(this, _autoplay, _preload, _timerRate, _startVolume, _streamer);				_video = (_mediaElement as VideoElement).video;				_video.width = _stageWidth;				_video.height = _stageHeight;				(_video as Video).smoothing = _enableSmoothing;				(_mediaElement as VideoElement).setReference(this);				(_mediaElement as VideoElement).setPseudoStreaming(_enablePseudoStreaming);				(_mediaElement as VideoElement).setPseudoStreamingStartParam(_pseudoStreamingStartQueryParam);				//_video.scaleMode = VideoScaleMode.MAINTAIN_ASPECT_RATIO;				addChild(_video);				/*if (_mediaUrl.indexOf("youtube.com") > -1 || _mediaUrl.indexOf("youtu.be") > -1) {					//Security.allowDomain("http://www.youtube.com");					_mediaElement = new YouTubeElement(this, _autoplay, _preload, _timerRate, _startVolume);					_video = (_mediaElement as YouTubeElement).player;					// these are set and then used once the player is loaded					(_mediaElement as YouTubeElement).initWidth = _stageWidth;					(_mediaElement as YouTubeElement).initHeight = _stageHeight;				} else {					_mediaElement = new VideoElement(this, _autoplay, _preload, _timerRate, _startVolume, _streamer);					_video = (_mediaElement as VideoElement).video;					_video.width = _stageWidth;					_video.height = _stageHeight;					(_video as Video).smoothing = _enableSmoothing;					(_mediaElement as VideoElement).setReference(this);					(_mediaElement as VideoElement).setPseudoStreaming(_enablePseudoStreaming);					(_mediaElement as VideoElement).setPseudoStreamingStartParam(_pseudoStreamingStartQueryParam);					//_video.scaleMode = VideoScaleMode.MAINTAIN_ASPECT_RATIO;					addChild(_video);				}*/			} else {				_mediaElement = new AudioElement(this, _autoplay, _preload, _timerRate, _startVolume);			}			if(_posterSrc) {				_output.appendText("poster: " + _posterSrc + "\n");				_posterObj = new Loader();				_posterObj.load(new URLRequest(_posterSrc));				_posterObj.contentLoaderInfo.addEventListener(Event.COMPLETE, function fn():void {					var stageRatio:Number = stage.stageWidth / _stageHeight ;					var loaderRatio:Number = _posterObj.width / _posterObj.height;					if(stageRatio < loaderRatio){						_posterObj.width = stage.stageWidth;						_posterObj.scaleY = _posterObj.scaleX;					}else{						_posterObj.height = _stageHeight;						_posterObj.scaleX = _posterObj.scaleY;					}					_posterObj.x = (stage.stageWidth - _posterObj.width)/2;					_posterObj.y = (_stageHeight - _posterObj.height)/2;					if(this.removeEventListener) this.removeEventListener(Event.COMPLETE, fn);				});				addChild(_posterObj);			}																			//PlayBtn Full Cover 			_playBtnMc = _mediaElementDisplay.getChildByName("playFullBtnMc") as MovieClip;			_playBtnMc.buttonMode = true;						_playBtnMc.addEventListener(MouseEvent.CLICK, playbtnClick, false);									///Skip ad btn			_skipAdMc = _mediaElementDisplay.getChildByName("skipAdMc") as MovieClip;			_skipTimer = new Timer(1000);			_skipTimer.addEventListener(TimerEvent.TIMER, SkipTimerFunc);			if(_skipAdTimerCount == 0){				_skipAdMc.visible =false;			}									_sharingMc.sharingicon_mc.addEventListener(MouseEvent.MOUSE_OVER, shareHoverFunc, false);						_sharingMc.sharingicon_mc.buttonMode = true;			_fullscreenIcon = _controlBar.getChildByName("fullscreenIcon") as MovieClip;			_fullscreenIcon .buttonMode = true;						_fullscreenIcon.addEventListener(MouseEvent.CLICK, fullScreenIconClick, false);			//button MouseOver and Our			_logoMc.addEventListener(MouseEvent.MOUSE_OVER, onbtnMouseOver, false);			_logoMc.addEventListener(MouseEvent.MOUSE_OUT, onbtnMouseOut, false);						_scrubMc.addEventListener(MouseEvent.MOUSE_OVER, onbtnMouseOver, false);			_scrubMc.addEventListener(MouseEvent.MOUSE_OUT, onbtnMouseOut, false);						_fullscreenIcon.addEventListener(MouseEvent.MOUSE_OVER, onbtnMouseOver, false);			_fullscreenIcon.addEventListener(MouseEvent.MOUSE_OUT, onbtnMouseOut, false);						_playBtnMc.addEventListener(MouseEvent.MOUSE_OVER, onbtnMouseOver, false);			_playBtnMc.addEventListener(MouseEvent.MOUSE_OUT, onbtnMouseOut, false);			//_fullscreenIcon.gotoAndStop(3);						_volumeMuted = _controlBar.getChildByName("muted_mc") as SimpleButton;			_volumeUnMuted = _controlBar.getChildByName("unmuted_mc") as SimpleButton;			_volumeMuted.addEventListener(MouseEvent.CLICK, toggleVolume, false);			_volumeUnMuted.addEventListener(MouseEvent.CLICK, toggleVolume, false);			_playButton = _controlBar.getChildByName("play_btn") as SimpleButton;			_playButton.addEventListener(MouseEvent.CLICK, playbtnClick);			_pauseButton = _controlBar.getChildByName("pause_btn") as SimpleButton;			_pauseButton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {				_mediaElement.pause();			});			_pauseButton.visible = false;			_duration = _controlBar.getChildByName("duration_txt") as TextField;			_currentTime = _controlBar.getChildByName("currentTime_txt") as TextField;			_hoverTime = _controlBar.getChildByName("hoverTime") as MovieClip;			//_hoverTimeText = _hoverTime.getChildByName("hoverTime_txt") as TextField;			_hoverTime.visible=false;			_hoverTime.y=(_hoverTime.height/2)+1;			_hoverTime.x=0;			// Add new timeline scrubber events			_scrubMc.buttonMode = true;			_scrubMc.addEventListener(MouseEvent.MOUSE_DOWN, dragIt);			_scrubMc.addEventListener(MouseEvent.MOUSE_UP, dropIt);			_scrubMc.parent.addEventListener(MouseEvent.MOUSE_UP, dropIt);			_scrubOverlay.addEventListener(MouseEvent.MOUSE_MOVE, scrubMove);			_scrubOverlay.addEventListener(MouseEvent.CLICK, scrubClick);			_scrubOverlay.addEventListener(MouseEvent.MOUSE_OVER, scrubOver);			_scrubOverlay.addEventListener(MouseEvent.MOUSE_OUT, scrubOut);			if (_autoHide) {				// Add mouse activity for show/hide of controls				stage.addEventListener(Event.MOUSE_LEAVE, mouseActivityLeave);				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseActivityMove);				_inactiveTime = 2500;				_timer = new Timer(_inactiveTime)				_timer.addEventListener(TimerEvent.TIMER, idleTimer);				_timer.start();			}			if(_startVolume<=0) {				trace("INITIAL VOLUME: "+_startVolume+" MUTED");				_volumeMuted.visible=true;				_volumeUnMuted.visible=false;			} else {				trace("INITIAL VOLUME: "+_startVolume+" UNMUTED");				_volumeMuted.visible=false;				_volumeUnMuted.visible=true;			}						_controlBar.visible = _showControls;			_playBtnMc.visible = _showControls;			setControlDepth();			_output.appendText("stage: " + stage.stageWidth + "x" + stage.stageHeight + "\n");			_output.appendText("file: " + _mediaUrl + "\n");			_output.appendText("autoplay: " + _autoplay.toString() + "\n");			_output.appendText("preload: " + _preload.toString() + "\n");			_output.appendText("isvideo: " + _isVideo.toString() + "\n");			_output.appendText("smoothing: " + _enableSmoothing.toString() + "\n");			_output.appendText("timerrate: " + _timerRate.toString() + "\n");			_output.appendText("displayState: " +(stage.hasOwnProperty("displayState")).toString() + "\n");			// attach javascript			_output.appendText("ExternalInterface.available: " + ExternalInterface.available.toString() + "\n");			_output.appendText("ExternalInterface.objectID: " + ((ExternalInterface.objectID != null)? ExternalInterface.objectID.toString() : "null") + "\n");									if (_isVideo)			{				loadVastXMLFunc();			}else{				setDefaultVideo();			}		}		function setVideo(url,contentType){						if (url != "") {				//_mediaElement.setSrc(_mediaUrl);								if (_isVideo)				{					if (url.indexOf("youtube.com") > -1 || url.indexOf("youtu.be") > -1) {												//Security.allowDomain("http://www.youtube.com");						_mediaElement = new YouTubeElement(this, _autoplay, _preload, _timerRate, _startVolume);						_video = (_mediaElement as YouTubeElement).player;							// these are set and then used once the player is loaded						(_mediaElement as YouTubeElement).initWidth = _stageWidth;						(_mediaElement as YouTubeElement).initHeight = _stageHeight;						}else{						addChild(_video)					}				}				_mediaElement.setSrc(url);			}			_videoType = contentType;			setControlDepth();						_mediaElement.setContenttype(contentType);						//setDefaultColorForControls();			positionControls();			// Fire this once just to set the width on some dynamically sized scrub bar items;			_scrubBar.scaleX=0;			_scrubLoaded.scaleX=0;			if (ExternalInterface.available) {				_output.appendText("Adding callbacks...\n");				try {					if (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != "") {						// add HTML media methods						ExternalInterface.addCallback("playMedia", playMedia);						ExternalInterface.addCallback("loadMedia", loadMedia);						ExternalInterface.addCallback("pauseMedia", pauseMedia);						ExternalInterface.addCallback("stopMedia", stopMedia);						ExternalInterface.addCallback("setSrc", setSrc);						ExternalInterface.addCallback("setCurrentTime", setCurrentTime);						ExternalInterface.addCallback("setVolume", setVolume);						ExternalInterface.addCallback("setMuted", setMuted);						ExternalInterface.addCallback("setFullscreen", setFullscreen);						ExternalInterface.addCallback("setVideoSize", setVideoSize);						ExternalInterface.addCallback("positionFullscreenButton", positionFullscreenButton);						ExternalInterface.addCallback("hideFullscreenButton", hideFullscreenButton);						// fire init method						ExternalInterface.call(_jsInterface + ".initPlugin", ExternalInterface.objectID);					}					_output.appendText("Success...\n");				} catch (error:SecurityError) {					_output.appendText("A SecurityError occurred: " + error.message + "\n");				} catch (error:Error) {					_output.appendText("An Error occurred: " + error.message + "\n");				}			}						if (_preload != "none") {				_mediaElement.load();				if (_autoplay) {					_mediaElement.play();				}			} else if (_autoplay) {				_mediaElement.load();				_mediaElement.play();			}			if(_autoplay && contentType == "content")			{				_mediaElement.play();			}						// listen for resize			stage.addEventListener(Event.RESIZE, resizeHandler);			// send click events up to javascript			stage.addEventListener(MouseEvent.CLICK, stageClicked);			// resize			stage.addEventListener(FullScreenEvent.FULL_SCREEN, stageFullScreenChanged);					}		public function setControlDepth():void {			// put these on top						addChild(_output);			addChild(_playBtnMc);			if(_videoType != "content")			{				addChild(_skipAdMc);			}			addChild(_controlBar);			addChild(_fullscreenButton);		}		// borrowed from jPLayer		// https://github.com/happyworm/jPlayer/blob/e8ca190f7f972a6a421cb95f09e138720e40ed6d/actionscript/Jplayer.as#L228		private function checkFlashVars(p:Object):void {			var i:Number = 0;			for (var s:String in p) {				if (isIllegalChar(p[s], s === 'file')) {					securityIssue = true; // Illegal char found				}				i++;			}			if(i === 0 || securityIssue) {				directAccess = true;			}		}		private static function parseStr (str:String) : Object {			var hash:Object = {},				arr1:Array, arr2:Array;			str = unescape(str).replace(/\+/g, " ");			arr1 = str.split('&');			if (!arr1.length) {				return {};			}			for (var i:uint = 0, length:uint = arr1.length; i < length; i++) {				arr2 = arr1[i].split('=');				if (!arr2.length) {					continue;				}				hash[trim(arr2[0])] = trim(arr2[1]);			}			return hash;		}		private static function trim(str:String) : String {			if (!str) {				return str;			}			return str.toString().replace(/^\s*/, '').replace(/\s*$/, '');		}		private function isIllegalChar(s:String, isUrl:Boolean):Boolean {			var illegals:String = "' \" ( ) { } * + \\ < >";			if(isUrl) {				illegals = "\" { } \\ < >";			}			if(Boolean(s)) { // Otherwise exception if parameter null.				for each (var illegal:String in illegals.split(' ')) {					if(s.indexOf(illegal) >= 0) {						return true; // Illegal char found					}				}			}			return false;		}		// START: Controls and events		private function mouseActivityMove(event:MouseEvent):void {			// if mouse is in the video area			if ((_hasStartedPlay && _showControls) && _autoHide && (mouseX>=0 && mouseX<=stage.stageWidth) && (mouseY>=0 && mouseY<=stage.stageHeight)) {				// This could be move to a nice fade at some point...				//_controlBar.visible = (_showControls || _isFullScreen);				//setHoverColorForControls();				_isMouseActive = true;				_idleTime = 0;				_timer.reset();				_timer.start()			}		}		private function mouseActivityLeave(event:Event):void {			if ((_hasStartedPlay && _showControls) && _autoHide) {				_isOverStage = false;				// This could be move to a nice fade at some point...				//_controlBar.visible = false;				//setDefaultColorForControls();				_isMouseActive = false;				_idleTime = 0;				_timer.reset();				_timer.stop();			}		}		private function idleTimer(event:TimerEvent):void    {			if ((_hasStartedPlay && _showControls) && _autoHide) {				// This could be move to a nice fade at some point...				//_controlBar.visible = false;				_isMouseActive = false;				_idleTime += _inactiveTime;				_idleTime = 0;				_timer.reset();				_timer.stop();			}		}		private function dragIt(event:MouseEvent):void{			pauseMedia();			trace("_scrubOverlay.width : " + _scrubOverlay.width);			rectangle = new Rectangle(_scrubOverlay.x,event.target.y,_scrubOverlay.width,0);			event.target.startDrag(false,rectangle);			dragging = true;			//event.target.addEventListener(Event.ENTER_FRAME, adjustStatus);		}				private function adjustStatus(e:Event):void		{			_scrubBar.width = e.target.x - _scrubBar.x;					}				private function dropIt(event:MouseEvent):void		{			if (dragging)			{				_scrubBar.width = event.target.x - _scrubBar.x;				_scrubMc.stopDrag();				dragging = false;				var seekBarPosition:Number =  (_scrubMc.x-_scrubTrack.x)/_scrubTrack.width*_mediaElement.duration();				_mediaElement.setCurrentTime(seekBarPosition);				playMedia();			}					}					private function scrubMove(event:MouseEvent):void {				if (_hoverTime.visible) {					var seekBarPosition:Number =  ((event.localX / _scrubTrack.width) *_mediaElement.duration())*_scrubTrack.scaleX;					var hoverPos:Number = (seekBarPosition / _mediaElement.duration()) *_scrubTrack.scaleX;					if (_isFullScreen) {						_hoverTime.x=event.target.parent.mouseX;					} else {						_hoverTime.x=mouseX;					}					_hoverTime.y = _scrubBar.y - (_hoverTime.height/2);					//_hoverTimeText.text = secondsToTimeCode(seekBarPosition);				}		}		private function scrubOver(event:MouseEvent):void {			_hoverTime.y = _scrubBar.y-(_hoverTime.height/2)+1;			_hoverTime.visible = true;			//trace(event);		}		private function scrubOut(event:MouseEvent):void {			_hoverTime.y = _scrubBar.y+(_hoverTime.height/2)+1;			_hoverTime.visible = false;			//_hoverTime.x=0;			//trace(event);		}		private function scrubClick(event:MouseEvent):void {			//trace(event);			var seekBarPosition:Number =  ((event.localX / _scrubTrack.width) *_mediaElement.duration())*_scrubTrack.scaleX;			//var tmp:Number = (_mediaElement.currentTime()/_mediaElement.duration())*_scrubTrack.width;			var canSeekToPosition:Boolean = _scrubLoaded.scaleX > (seekBarPosition / _mediaElement.duration()) *_scrubTrack.scaleX;			//var canSeekToPosition:Boolean = true;			/*			amountLoaded = ns.bytesLoaded / ns.bytesTotal;			loader.loadbar._width = amountLoaded * 208.9;			loader.scrub._x = ns.time / duration * 208.9;			*/			trace("seekBarPosition:"+seekBarPosition, "CanSeekToPosition: "+canSeekToPosition);			if (seekBarPosition>0 && seekBarPosition<_mediaElement.duration() && canSeekToPosition) {					_mediaElement.setCurrentTime(seekBarPosition);			}		}		public function toggleVolume(event:MouseEvent):void {			trace('Toggle Volume: '+event.currentTarget.name);			switch(event.currentTarget.name) {				case "muted_mc":					setMuted(false);					break;				case "unmuted_mc":					setMuted(true);					break;			}		}		private function toggleVolumeIcons(volume:Number):void {			if(volume<=0) {				_volumeMuted.visible = true;				_volumeUnMuted.visible = false;			} else {				_volumeMuted.visible = false;				_volumeUnMuted.visible = true;			}		}		private function positionControls(forced:Boolean=false):void {				// FLOATING MODE BOTTOM DISPLAY - similar to normal				_hoverTime.y=(_hoverTime.height/2)+1;				_hoverTime.x=0;				_controlBarBg.width = stage.stageWidth;				_controlBarBg.height = 33;				_controlBarBg.y=0;				_controlBarBg.x=0;				_pauseButton.scaleX = _playButton.scaleX=1;				_pauseButton.scaleY = _playButton.scaleY=1;				_pauseButton.x = _playButton.x = 7;				_pauseButton.y = _playButton.y = _controlBarBg.height-_playButton.height-4;				_currentTime.x = _playButton.x+_playButton.width+8;				_fullscreenIcon.x = _controlBarBg.width - _fullscreenIcon.width - 15;				_fullscreenIcon.y = 8;									_volumeMuted.x = _volumeUnMuted.x = _fullscreenIcon.x - _volumeUnMuted.width - 13;				_volumeMuted.y = _volumeUnMuted.y = 9;								_sharingMc.x = _volumeUnMuted.x - _sharingMc.width - 8;				_sharingMc.y = 8;								_logoMc.x = _sharingMc.x - _logoMc.width - 10;				_logoMc.y = 0;								_duration.x = _logoMc.x - _duration.width -10 ;				_duration.y = _currentTime.y = _controlBarBg.height - _currentTime.height - 10;				_scrubLoaded.x = _scrubBar.x = _scrubOverlay.x = _scrubTrack.x = _currentTime.x + _currentTime.width + 5;				_scrubLoaded.y = _scrubBar.y = _scrubOverlay.y = _scrubTrack.y = _controlBarBg.height - _scrubTrack.height - 12;				_scrubBar.width =  _scrubOverlay.width = _scrubTrack.width =  (_duration.x-_duration.width-10)-_duration.width-10;								_controlBar.x = 0;				_controlBar.y = stage.stageHeight - _controlBar.height +3;								_skipAdMc.x = stage.stageWidth - _skipAdMc.width;				_skipAdMc.y =_controlBar.y - _skipAdMc.height -  10;								_playBtnMc.playbtn.playbtninnerbgMc.width = _playBtnMc.playbtnbgMc.width = stage.stageWidth;				_playBtnMc.playbtn.playbtninnerbgMc.height = _playBtnMc.playbtnbgMc.height = stage.stageHeight-_controlBar.height +3;				_playBtnMc.x =_playBtnMc.playbtnbgMc.x = 0;				_playBtnMc.y =_playBtnMc.playbtnbgMc.y = 0;				_playBtnMc.playbtn.playbtninnerbgMc.x = - _playBtnMc.playbtn.playbtninnerbgMc.width/2;				_playBtnMc.playbtn.playbtninnerbgMc.y = - _playBtnMc.playbtn.playbtninnerbgMc.height/2;				_playBtnMc.playbtn.x = _playBtnMc.playbtn.width/2;				_playBtnMc.playbtn.y =_playBtnMc.playbtn.height/2;								//setControlDepth();				_fullscreenButton.alpha = 1;				_controlBar.alpha = 1;				_skipAdMc.alpha = 1;				_playBtnMc.alpha = 1;		}		// END: Controls				public function playbtnClick(e:MouseEvent = null):void{			if(_isEnded) {				_mediaElement.setCurrentTime(0);			}			_mediaElement.play();		}				public function onbtnMouseOut(e:MouseEvent):void{			if(e.currentTarget.name == "playFullBtnMc"){				e.currentTarget.playbtn.gotoAndStop(1);			}			else if(e.currentTarget.currentFrame == 4)			{				e.currentTarget.gotoAndStop(3);			}else{				e.currentTarget.gotoAndStop(1);			}		}		public function onbtnMouseOver(e:MouseEvent):void{			if(e.currentTarget.name == "playFullBtnMc"){				e.currentTarget.playbtn.gotoAndStop(2);			}			else if(e.currentTarget.currentFrame == 3)			{				e.currentTarget.gotoAndStop(4);			}else{				e.currentTarget.gotoAndStop(2);			}		}				public function stageClicked(e:MouseEvent):void {			//_output.appendText("click: " + e.stageX.toString() +","+e.stageY.toString() + "\n");			if(e.target.name == "playbtnbgMc" && _videoType != "content")			{				if(_selectedCreative.videoClicks)				{					if(_selectedCreative.videoClicks.clickThrough)					{						exit("clickThrough",_selectedCreative.videoClicks.clickThrough.uri);					}					var clickTracking = _selectedCreative.videoClicks.clickTracking;					if(clickTracking)					{						if(clickTracking.length > 0)						{							for (var cnt=0;cnt < clickTracking.length;cnt++)							{								thirdpartytrackingCall(clickTracking[cnt].uri);							}						}					}										var customClicks = _selectedCreative.videoClicks.customClicks;					if(customClicks)					{						if(customClicks.length > 0)						{							for (cnt=0;cnt < customClicks.length;cnt++)							{								thirdpartytrackingCall(customClicks[cnt].uri);							}						}					}				}			}			if (e.target == stage) {				sendEvent("click", "");			}		}		public function resizeHandler(e:Event):void {			_output.appendText("resizehandler " + stage.stageWidth.toString() + "x" + stage.stageHeight.toString() + "\n");			_stageWidth = stage.stageWidth;			//_stageHeight = stage.stageHeight-_controlBar.height;			repositionVideo();		}		// START: Fullscreen		private function enterFullscreen():void {			_output.appendText("enterFullscreen()\n");			var screenRectangle:Rectangle = new Rectangle(0, 0, flash.system.Capabilities.screenResolutionX, flash.system.Capabilities.screenResolutionY);			stage.fullScreenSourceRect = screenRectangle;			stage.displayState = StageDisplayState.FULL_SCREEN;			repositionVideo();			positionControls();			updateControls(HtmlMediaEvent.FULLSCREENCHANGE, '');			_controlBar.visible = true;			_isFullScreen = true;		}		private function exitFullscreen():void {			stage.displayState = StageDisplayState.NORMAL;			//_controlBar.visible = false;			_isFullScreen = false;		}		public function setFullscreen(gofullscreen:Boolean):void {			try {				//_fullscreenButton.visible = false;				if (gofullscreen) {					enterFullscreen();				} else {					exitFullscreen();				}			} catch (error:Error) {				/*// show the button when the security error doesn't let it work				_fullscreenButton.visible = true;				//_fullscreenButton.alpha = 1;µ				_isFullScreen = false;*/				trace("error setting fullscreen: " + error.message.toString() + "\n");			}		}		public function onFullscreen(e:FullScreenEvent)		{			if(stage.displayState == StageDisplayState.FULL_SCREEN)			{								_fullscreenIcon.gotoAndPlay(4);			}else{				_fullscreenIcon.gotoAndPlay(2);											}			trace("_fullscreenIcon.currentFrame : " + _fullscreenIcon.currentFrame);		}		// control bar button/icon		public function fullScreenIconClick(e:MouseEvent):void {			try {				_controlBar.visible = true;				setFullscreen(!_isFullScreen);				repositionVideo();			} catch (error:Error) {			}		}		// special floating fullscreen icon		public function fullscreenClick(e:MouseEvent):void {			_fullscreenButton.visible = false;			//_fullscreenButton.alpha = 0			try {				_controlBar.visible = true;				setFullscreen(true);				repositionVideo();				positionControls();			} catch (error:Error) {			}		}		public function stageFullScreenChanged(e:FullScreenEvent):void {			_output.appendText("fullscreen event: " + e.fullScreen.toString() + "\n");			_fullscreenButton.visible = false;			//_fullscreenButton.alpha = 0;			_isFullScreen = e.fullScreen;			sendEvent(HtmlMediaEvent.FULLSCREENCHANGE, "isFullScreen:" + e.fullScreen );			if (!e.fullScreen) {				_controlBar.visible = _showControls;			}		}		// END: Fullscreen		// START: external interface		public function playMedia():void {			if(_isEnded) {				_mediaElement.setCurrentTime(0);				//_mediaElement.setCurrentTime(time);			}			_output.appendText("play\n");			_mediaElement.play();		}		public function loadMedia():void {			_output.appendText("load\n");			_mediaElement.load();		}		public function pauseMedia():void {			_output.appendText("pause\n");			_mediaElement.pause();		}		public function setSrc(url:String):void {			_output.appendText("setSrc: " + url + "\n");			_mediaElement.setSrc(url);		}		public function stopMedia():void {			_output.appendText("stop\n");			_mediaElement.stop();		}		public function setCurrentTime(time:Number):void {			_output.appendText("seek: " + time.toString() + "\n");			_mediaElement.setCurrentTime(time);		}		public function setVolume(volume:Number):void {			_output.appendText("volume: " + volume.toString() + "\n");			_mediaElement.setVolume(volume);			toggleVolumeIcons(volume);		}		public function setMuted(muted:Boolean):void {			_output.appendText("muted: " + muted.toString() + "\n");			_mediaElement.setMuted(muted);			toggleVolumeIcons(_mediaElement.getVolume());		}		public function setVideoSize(width:Number, height:Number):void {			_output.appendText("setVideoSize: " + width.toString() + "," + height.toString() + "\n");			_stageWidth = width;			//_stageHeight = height;			if (_video != null) {				repositionVideo();				positionControls();				//_fullscreenButton.x = stage.stageWidth - _fullscreenButton.width - 10;				_output.appendText("result: " + _video.width.toString() + "," + _video.height.toString() + "\n");			}		}		public function positionFullscreenButton(x:Number, y:Number, visibleAndAbove:Boolean ):void {			_output.appendText("position FS: " + x.toString() + "x" + y.toString() + "\n");			// bottom corner			/*			_fullscreenButton.x = stage.stageWidth - _fullscreenButton.width			_fullscreenButton.y = stage.stageHeight - _fullscreenButton.height;			*/			// position just above			if (visibleAndAbove) {				_fullscreenButton.x = x+1;				_fullscreenButton.y = y - _fullscreenButton.height+1;			} else {				_fullscreenButton.x = x;				_fullscreenButton.y = y;			}			// check for oversizing			if ((_fullscreenButton.x + _fullscreenButton.width) > stage.stageWidth)				_fullscreenButton.x = stage.stageWidth - _fullscreenButton.width;			// show it!			if (visibleAndAbove) {				//_fullscreenButton.alpha = 1;				_fullscreenButton.visible = true;			}		}		public function hideFullscreenButton():void {			_fullscreenButton.visible = false;			//_fullscreenButton.alpha = 0;		}		// END: external interface		private function repositionVideo():void {			if (stage.displayState == "fullScreen") {				fullscreen = true;			} else {				fullscreen = false;			}			_output.appendText("positioning video "+stage.displayState+' - '+_stageWidth+"x"+_stageHeight+"\n");			if (_mediaElement is VideoElement) {				if (isNaN(_nativeVideoWidth) || isNaN(_nativeVideoHeight) || _nativeVideoWidth <= 0 || _nativeVideoHeight <= 0) {					_output.appendText("ERR: I dont' have the native dimension\n");					return;				}				// calculate ratios				var stageRatio:Number, nativeRatio:Number;				_video.x = 0;				_video.y = 0;				if(fullscreen == true) {					stageRatio = flash.system.Capabilities.screenResolutionX/flash.system.Capabilities.screenResolutionY;					nativeRatio = _nativeVideoWidth/_nativeVideoHeight;					// adjust size and position					if (nativeRatio > stageRatio) {						_mediaElement.setSize(flash.system.Capabilities.screenResolutionX, _nativeVideoHeight * flash.system.Capabilities.screenResolutionX / _nativeVideoWidth);						_video.y = flash.system.Capabilities.screenResolutionY/2 - _video.height/2;					} else if (stageRatio > nativeRatio) {						_mediaElement.setSize(_nativeVideoWidth * (flash.system.Capabilities.screenResolutionY-_controlBar.height+1) / _nativeVideoHeight, (flash.system.Capabilities.screenResolutionY-_controlBar.height+1));						_video.x = flash.system.Capabilities.screenResolutionX/2 - _video.width/2;					} else if (stageRatio == nativeRatio) {						_mediaElement.setSize(flash.system.Capabilities.screenResolutionX, (flash.system.Capabilities.screenResolutionY-_controlBar.height+1));					}				} else {					stageRatio = _stageWidth/_stageHeight;					nativeRatio = _nativeVideoWidth/_nativeVideoHeight;					// adjust size and position					if (nativeRatio > stageRatio) {						_mediaElement.setSize(_stageWidth, _nativeVideoHeight * _stageWidth / _nativeVideoWidth);						_video.y = _stageHeight/2 - _video.height/2;					} else if (stageRatio > nativeRatio) {						_mediaElement.setSize( _nativeVideoWidth * _stageHeight / _nativeVideoHeight, _stageHeight);						_video.x = _stageWidth/2 - _video.width/2;					} else if (stageRatio == nativeRatio) {						_mediaElement.setSize(_stageWidth, _stageHeight);					}				}			} else if (_mediaElement is YouTubeElement) {				if(fullscreen == true) {					_mediaElement.setSize(flash.system.Capabilities.screenResolutionX, flash.system.Capabilities.screenResolutionY);				} else {					_mediaElement.setSize(_stageWidth, _stageHeight);				}			}			positionControls();		}		// SEND events to JavaScript		public function sendEvent(eventName:String, eventValues:String):void {			if(eventName == HtmlMediaEvent.PLAY && _isVideo) {				if(_posterObj && _posterObj.stage) {					_posterObj.parent.removeChild(_posterObj);				}				_hasStartedPlay = true;			}			// special video event			if (eventName == HtmlMediaEvent.LOADEDMETADATA && _isVideo) {				_output.appendText("METADATA RECEIVED: ");				try {					if (_mediaElement is VideoElement) {						_nativeVideoWidth = (_mediaElement as VideoElement).videoWidth;						_nativeVideoHeight = (_mediaElement as VideoElement).videoHeight;					}				} catch (e:Error) {					_output.appendText(e.toString() + "\n");				}				_output.appendText(_nativeVideoWidth.toString() + "x" + _nativeVideoHeight.toString() + "\n");				if(stage.displayState == "fullScreen" ) {					setVideoSize(_nativeVideoWidth, _nativeVideoHeight);				}				repositionVideo();			}			updateControls(eventName, eventValues);			if (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != "") {				if (eventValues == null)					eventValues == "";				if (_isVideo) {					eventValues += (eventValues != "" ? "," : "") + "isFullScreen:" + _isFullScreen;				}				eventValues = "{" + eventValues + "}";				/*				OLD DIRECT METHOD				ExternalInterface.call(					"function(id, name) { mejs.MediaPluginBridge.fireEvent(id,name," + eventValues + "); }",					ExternalInterface.objectID,					eventName);				*/				// use set timeout for performance reasons				//if (!_showControls) {				ExternalInterface.call("setTimeout", _jsInterface + ".fireEvent('" + ExternalInterface.objectID + "','" + eventName + "'," + eventValues + ")",0);				//}			}		}				public function iabEvents(eventName,eventValues){			if (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != "") {				if (eventValues == null)					eventValues == "";				eventValues = "{" + eventValues + "}";				ExternalInterface.call("setTimeout", _jsInterface + ".fireEvent('" + ExternalInterface.objectID + "','" + eventName + "'," + eventValues + ")",0);							}			var track_length = _selectedCreative.trackingEvents.length;			if(track_length > 1)			{				for (var cnt=0;cnt < track_length;cnt++)				{										if(eventName == _selectedCreative.trackingEvents[cnt].event)					{						trace("iabEventTrackUrl : "  + _selectedCreative.trackingEvents[cnt].uri);												thirdpartytrackingCall(_selectedCreative.trackingEvents[cnt].uri);					}				}			}		}				private function thirdpartytrackingCall(url)		{			ExternalInterface.call("trkpx",url);		}				private function updateControls(eventName:String, eventValues:String):void {			//trace("updating controls: " + eventName + ' - ' + eventValues);			try {				// update controls				switch (eventName) {					case "ended":						_isEnded = true;					case "pause":					case "paused":						if(_skipAdTimerCount !=0) 							_skipTimer.stop();						//(_clickFlgForBgMcForVideoClickEvents)?_playBtnMc.playbtn.visible = true: ((_showControls)?_playBtnMc.visible = true:_playBtnMc.visible = false);						_playButton.visible = true;						_pauseButton.visible = false;						break;					case "progress":						if(eventValues.indexOf('paused:true') >= 0) {							//Ignore progress event when paused							break;						}					case "play":					case "playing":						_autoplay = true;						if(_skipAdTimerCount !=0 && _skipAdMc.visible) 						{							_skipTimer.start();						}											(_clickFlgForBgMcForVideoClickEvents)?_playBtnMc.playbtn.visible = false:_playBtnMc.visible = false;						_isEnded = false;						_playButton.visible = false;						_pauseButton.visible = true;						break;				}				if (eventName == HtmlMediaEvent.TIMEUPDATE ||					eventName == HtmlMediaEvent.PROGRESS ||					eventName == HtmlMediaEvent.FULLSCREENCHANGE) {					//_duration.text = (_mediaElement.duration()*1).toString();					_duration.text =  secondsToTimeCode(_mediaElement.duration());					//_currentTime.text = (_mediaElement.currentTime()*1).toString();					_currentTime.text =  secondsToTimeCode(_mediaElement.currentTime());					var pct:Number =  (_mediaElement.currentTime() / _mediaElement.duration()) *_scrubTrack.scaleX;					_scrubBar.scaleX = pct;					_scrubLoaded.scaleX = (_mediaElement.currentProgress()*_scrubTrack.scaleX)/100;					_scrubMc.y = Math.round(_scrubBar.y - (_scrubMc.height-_scrubBar.height)/2) + 2;					if(!dragging)					{						_scrubMc.x = _scrubBar.x+ _scrubBar.width - _scrubMc.width/2;					}				}			} catch (error:Error) {				trace("error: " + error.toString());			}		}		// START: utility		private function secondsToTimeCode(seconds:Number):String {			var timeCode:String = "";			seconds = Math.round(seconds);			var minutes:Number = Math.floor(seconds / 60);			timeCode = (minutes >= 10) ? minutes.toString() : "0" + minutes.toString();			seconds = Math.floor(seconds % 60);			timeCode += ":" + ((seconds >= 10) ? seconds.toString() : "0" + seconds.toString());			return timeCode; //minutes.toString() + ":" + seconds.toString();		}		private function applyColor(item:Object, color:String):void {			var myColor:ColorTransform = item.transform.colorTransform;			myColor.color = Number(color);			item.transform.colorTransform = myColor;		}				private function shareHoverFunc(e:MouseEvent) {			e.target.parent.gotoAndStop(2);			_sharingMc.sharingBtnsBgMc.addEventListener(MouseEvent.MOUSE_OVER, shareHoverOutFunc, false);			_sharingMc.sharingBtnsMc.twbtn.addEventListener(MouseEvent.CLICK, shareClick, false);			_sharingMc.sharingBtnsMc.fbbtn.addEventListener(MouseEvent.CLICK, shareClick, false);			_sharingMc.sharingBtnsMc.pibtn.addEventListener(MouseEvent.CLICK, shareClick, false);			_sharingMc.sharingBtnsMc.gpbtn.addEventListener(MouseEvent.CLICK, shareClick, false);			_sharingMc.sharingBtnsMc.embtn.addEventListener(MouseEvent.CLICK, shareClick, false);		}		private function shareHoverOutFunc(e:MouseEvent) {			e.target.parent.gotoAndStop(1);		}				private function shareClick(e:MouseEvent):void		{			// TODO Auto Generated method stub			trace(e.currentTarget.name);			switch(e.currentTarget.name)			{				case "twbtn":				{					var twshareurl:String = "https://twitter.com/intent/tweet?&url=" +_shareLnk; 					exit("twitter",twshareurl,"","width=685,height=420");					break;				}				case "fbbtn":				{					var fbshareurl:String = "https://www.facebook.com/sharer/sharer.php?u="+_shareLnk;					exit("facebook",fbshareurl,"","width=685,height=350");					break;				}				case "pibtn":				{					var pinshareurl:String = "http://pinterest.com/pin/create/button/?url="+encodeURI(_shareLnk);					//"&media="+encodeURI(_imageObj.image); 					exit("pinterest",pinshareurl,"","width=750,height=630");					break;				}					case "gpbtn":				{					var gpurl = "https://plus.google.com/share?url="+_shareLnk;					exit("gplus",gpurl,"width=685,height=350");					break;				}				default:				{					var emailurl="mailto:xyz@acs.com?&subject=test&body=test";															exit("email",emailurl);					break;				}			}		}		public function exit(evt_name:String,url:String,windowtitle:String = "",windowparam:String="") {			//navigateToURL(new URLRequest(url));			if(windowparam == "")			{				ExternalInterface.call("openurl", String(url));			}else{				ExternalInterface.call("openurl", String(url),windowtitle,windowparam);			}			        }				private function setHoverColorForControls(){			//0xEEEEEE			applyColor(_scrubTrack, "0xB7B7B7");			applyColor(_scrubBar, "0xB7B7B7");			applyColor(_scrubOverlay, "0xB7B7B7");			//applyColor(_scrubMc.scrubberMc, "0xFFFFFF");			applyColor(_pauseButton, "0xc1c1c1	");			applyColor(_playButton, "0xc1c1c1");			applyColor(_volumeMuted, "0xc1c1c1");			applyColor(_volumeUnMuted, "0xc1c1c1");			applyColor(_fullscreenIcon,"0xc1c1c1");			//applyColor(_currentTime, "0x777777");			//applyColor(_duration, "0x777777");			applyColor(_sharingMc.sharingicon_mc, "0xB7B7B7");						_logoMc.norLogoMc.visible = false;			_logoMc.hovLogoMc.visible = true;		}		private function setDefaultColorForControls()		{			//0x777777			applyColor(_scrubOverlay, "0xB7B7B7");			applyColor(_scrubTrack, "0xB7B7B7");			applyColor(_scrubBar, "0xB7B7B7");			//applyColor(_scrubMc.scrubberMc, "0xB7B7B7");			applyColor(_pauseButton, "0x777777");			applyColor(_playButton, "0x777777");			applyColor(_volumeMuted, "0x777777");			applyColor(_volumeUnMuted, "0x777777");			applyColor(_fullscreenIcon,"0x777777");			//applyColor(_currentTime, "0x777777");			//applyColor(_duration, "0x777777");			applyColor(_sharingMc.sharingicon_mc, "0x777777");			_logoMc.norLogoMc.visible = true;			_logoMc.hovLogoMc.visible = false;		}								private function loadVastXMLFunc(){			if(_vastXML.length > 0){				// XML loading				var loader:URLLoader = new URLLoader();				loader.addEventListener(Event.COMPLETE, xmlprocessing);				loader.load(new URLRequest(_vastXML));				}else{								setVideo(_mediaUrl,"content");			}		}				private function xmlprocessing(e)		{						var parser:VASTParser = new VASTParser();            var xmldata:XML = XML(e.target.data);            parser.setData(xmldata);            var output1:VAST = parser.parse();									if(output1.ads.length > 0)			{				trace(output1.ads[0].creatives.length);												var cr = output1.ads[0].creatives;				var cr_length = cr.length;				if(cr_length > 1)				{					for (var cnt=0;cnt < cr_length;cnt++)					{						if(cr[cnt].sequence == 1)						{							_selectedCreative = cr[cnt].source;							setVideo(cr[cnt].source.mediaFiles[0].uri,"pre");							break;						}					}				}								if(_selectedCreative.videoClicks)				{					if(_selectedCreative.videoClicks.clickThrough)					{						_clickFlgForBgMcForVideoClickEvents = true;					}					var clickTracking = _selectedCreative.videoClicks.clickTracking;					if(clickTracking)					{						_clickFlgForBgMcForVideoClickEvents = true;					}										var customClicks = _selectedCreative.videoClicks.customClicks;					if(customClicks)					{						_clickFlgForBgMcForVideoClickEvents = true;					}				}			}else{				setDefaultVideo();			}					}		//used for viewing playbtn on videofullarea		public function showCenterPlayBtn(){			(_clickFlgForBgMcForVideoClickEvents)?_playBtnMc.playbtn.visible = true: ((_showControls)?_playBtnMc.visible = true:_playBtnMc.visible = false);		}		public function setDefaultVideo()		{						stopMedia();			ExternalInterface.call("mejs.players."+_flashid.split("_flash").join("p")+".pause()");			removeChild(_skipAdMc);			removeChild(_video);			if(!_autoplay)			{				(_clickFlgForBgMcForVideoClickEvents)?_playBtnMc.playbtn.visible = true: ((_showControls)?_playBtnMc.visible = true:_playBtnMc.visible = false);			}			_playButton.visible = true;			_pauseButton.visible = false;			setVideo(_mediaUrl,"content");					}									private function SkipTimerFunc(e:TimerEvent)		{			trace("_skipAdTimerCount : " + _skipAdTimerCount);			if(_skipAdTimerCount !=0)			{				_skipAdTimerCount--;				setSkipTxt();			}else{				_skipAdMc.gotoAndStop(3);				_skipTimer.stop();				_skipAdMc.buttonMode = true;				_skipAdMc.addEventListener(MouseEvent.CLICK,onSkipAd);			}		}				private function setSkipTxt ()		{			_skipAdMc.gotoAndStop(2);			var txtfmt:TextFormat= new TextFormat();			txtfmt.size = 11;			txtfmt.letterSpacing = 2;						_skipAdMc.skipcnttxt.multiline=true;			_skipAdMc.skipcnttxt.defaultTextFormat = txtfmt;				_skipAdMc.skipcnttxt.setTextFormat(_skipAdMc.skipcnttxt.defaultTextFormat);				_skipAdMc.skipcnttxt.text = "YOU CAN SKIP THIS AD IN "+(_skipAdTimerCount+1);		}				private function onSkipAd(e:MouseEvent)		{			sendEvent("adSkipped","");			setDefaultVideo();			trace("Ad Skipped");		}	}}